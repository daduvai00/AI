
const fs = global.nodemodule["fs-extra"];
const moment = require("moment-timezone");

module.exports.config = {
  name: "Obot",
  version: "1.0.1",
  hasPermission: 0,
  credits: "ЁЭРВЁЭРШЁЭРБЁЭРДЁЭРС тШвя╕П_ЁЦгШ -ЁЭРБЁЭРОЁЭРУ тЪая╕П ЁЭС╗ЁЭСмЁЭСиЁЭС┤_ тШвя╕П",
  description: "goibot",
  commandCategory: "Noprefix",
  usages: "noprefix",
  cooldowns: 5,
};

const responses = {
  missYou: "ржЖржорж┐ рждрзЛржорж╛ржХрзЗ рж░рж╛ржЗрждрзЗ ржорж┐рж╕ ржЦрж╛ржЗЁЯе╣ЁЯдЦЁЯСЕ/ЁЯСЕ-тЬШ  ЁЯОА ЁЯНТ:))",
  emojiResponse: "ЁЯла",
  help: "Type /help",
  sim: "simsimi ржХржорж╛ржирзНржб ржПржбрж╝ ржирж╛ржЗ ржЯрж╛ржЗржк ржХрж░рзБржи baby",
  greetings: {
    "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо": "ржУржпрж╝рж╛рж▓рж╛ржЗржХрзБржорзБрж╕-рж╕рж╛рж▓рж╛ржо-!!ЁЯЦд",
    "morning": "GOOD MORNING ржжрж╛ржд ржмрзНрж░рж╛рж╢ ржХрж░рзЗ ржЦрзЗрзЯрзЗ ржирзЗржУЁЯШЪ"
  },
  name: "MY NAME IS ┬░_>Assistant AI",
  adminResponse: "He is T├вM├пM уГГтЭдя╕П",
  botStatus: "My Creator:Tamim тЭдя╕П рж╣рж╛ржЗ ржЖржорж┐ ржорзЗржЫрзЗржирзНржЬрж╛рж░ ROBOT ржЖрж╛ржорж╛рж░ ржмрж╕ ржЖржорж╛ржХрзЗ ржмрж╛ржирж┐рзЯрзЗржЫрзЗржи ржЖржкржирж╛ржжрзЗрж░ ржХрзЗ рж╣рж╛рж╕рж╛ржирзЛрж░ ржЬржирзНржп ржЖржорж┐ ржЪрж╛ржЗ ржЖржкржирж╛рж░рж╛ рж╕ржм рж╕ржорзЯ рж╣рж╛рж╕рж┐ ржЦрзБрж╢рж┐ ржерж╛ржХрзЗржи",
  sorry: "рж╕рж░рж┐ ржмрж╕ ржорж╛ржл ржХрж░рзЗ ржжрзЗржи ржЖрж░ ржПржоржи ржнрзБрж▓ рж╣ржмрзЗ ржирж╛ЁЯе║ЁЯЩП",
  compliment: [
    "ржмрзЗрж╢рж┐ Bot Bot ржХрж░рж▓рзЗ leave ржирж┐ржмрзЛ ржХрж┐ржирзНрждрзБЁЯШТЁЯШТ",
    "рждрзБржорж┐ ржХрж┐ ржЖржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ? ЁЯЩИЁЯТЛ"
  ],
  // Add other response categories as needed
};

module.exports.handleEvent = async function({ api, event, args, Threads, Users }) {
  const { threadID, messageID } = event;
  const time = moment.tz("Asia/Dhaka").format("HH:MM:ss L");
  const name = await Users.getNameUser(event.senderID);
  
  // Lowercase the event body for ease of matching
  const body = event.body.toLowerCase(); 

  // Simple checks for specific phrases
  if (body.includes("miss you")) {
    return api.sendMessage(responses.missYou, threadID);
  }
  
  if (body.includes("ЁЯШТ") || body.includes("ЁЯШ╜")) {
    return api.sendMessage(responses.emojiResponse, threadID);
  }

  if (body.includes("help")) {
    return api.sendMessage(responses.help, threadID);
  }

  if (body.includes("рждрж╛ржорж┐ржо") || body.includes("simsimi")) {
    return api.sendMessage("ржЙржирж┐ ржПржЦржи ржмрж┐ржЬрж┐ ржЖржЫрзЗржи ржХрзА ржмрж▓ржмрзЗржи ржЖржорж╛ржХрзЗ ржмрж▓рзЗржи ", threadID);
  }

  if (responses.greetings[body]) {
    return api.sendMessage(responses.greetings[body], threadID);
  }

  if (body.includes("tor nam ki") || body.includes("name")) {
    return api.sendMessage(responses.name, threadID);
  }

  if (body.includes("admin") || body.includes("admin ke")) {
    return api.sendMessage(responses.adminResponse, threadID);
  }

  if (body.includes("kisser")) {
    return api.sendMessage("я╕П рждрзБржорж┐ ржкржБржЪрж╛ рждрзЛржорж╛ржХрзЗ ржХрж┐рж╕ ржжрж┐ржмрзЛ ржирж╛ ЁЯдн", threadID);
  }

  // Add more specific responses...
  // Example general phrases or insults
  const angerResponses = [
    "я╕Прж░рж╛ржЧ ржХрж░рзЗ ржирж╛ рж╕рзЛржирж╛ ржкрж╛ржЦрж┐ ржПрждрзЛ рж░рж╛ржЧ рж╢рж░рзАрж░рзЗрж░ ржЬржирзНржп ржнрж╛рж▓рзЛ ржирж╛ЁЯе░",
    // additional responses can be added
  ];

  const badWordsResponses = responses.complaint; // Adjust as needed
  
  if (body.includes("bc") || body.includes("mc")) {
    return api.sendMessage("SAME TO YOUЁЯШК ", threadID);
  }

  // Fallback response for unhandled cases
  const randomResponse = angryResponses[Math.floor(Math.random() * angryResponses.length)];
  return api.sendMessage(randomResponse, threadID);
};
```
