const fs = require('fs');
const path = require('path');

module.exports.config = {
  name: "approve",
  version: "6.1.0",
  permission: 1,
  usePrefix: true,
  credits: "TOHIDUL (Easy Bangla Edition) + Copilot Config Rewrite",
  description: "Owner approval system ‚Äî approved ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡¶ü ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§ (config.json storage edition)",
  commandCategory: "Admin",
  usages: "/approve [list|pending|help]",
  cooldowns: 5
};

const OWNER_ID = "61577006758691","61570292561520"
const CONFIG_PATH = path.join(__dirname, '../../config.json');

function loadConfig() {
  try {
    return JSON.parse(fs.readFileSync(CONFIG_PATH, "utf8"));
  } catch (e) {
    // Create default config if not found or corrupted
    const def = {
      "AUTO_APPROVE": { "enabled": true, "approvedGroups": [], "autoApproveMessage": false },
      "APPROVAL": { "approvedGroups": [], "pendingGroups": [], "rejectedGroups": [] }
    };
    fs.writeFileSync(CONFIG_PATH, JSON.stringify(def, null, 2));
    return def;
  }
}

function saveConfig(config) {
  fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
}

module.exports.run = async function ({ api, event, args }) {
  if (event.senderID !== OWNER_ID) {
    return api.sendMessage(`‚õîÔ∏è ‡¶ï‡ßá‡¶¨‡¶≤ owner (${OWNER_ID}) approval ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!`, event.threadID, event.messageID);
  }

  const { threadID, messageID } = event;

  let config = loadConfig();

  const command = (args[0] || "").toLowerCase();

  try {
    switch (command) {
      case "help": {
        const helpMsg = `üìã APPROVE COMMAND HELP:

üî∏ /approve ‚Äî ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ approve ‡¶ï‡¶∞‡ßÅ‡¶®
üî∏ /approve list ‚Äî ‡¶∏‡¶¨ approved ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
üî∏ /approve pending ‚Äî pending ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
üî∏ /approve reject <groupID> ‚Äî ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ reject ‡¶ï‡¶∞‡ßÅ‡¶®
üî∏ /approve help ‚Äî ‡¶è‡¶á help ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú

üí° Note: ‡¶∂‡ßÅ‡¶ß‡ßÅ owner ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§`;
        return api.sendMessage(helpMsg, threadID, messageID);
      }

      case "list": {
        const approvedGroups = config.APPROVAL.approvedGroups || [];
        if (approvedGroups.length === 0) {
          return api.sendMessage("üìù ‡¶ï‡ßã‡¶®‡ßã approved ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶®‡ßá‡¶á!", threadID, messageID);
        }
        let msg = `‚úÖ APPROVED GROUPS (${approvedGroups.length}):\n\n`;
        approvedGroups.slice(0, 15).forEach((gid, i) => {
          msg += `${i + 1}. üÜî ${gid}\n`;
        });
        if (approvedGroups.length > 15) {
          msg += `... ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡¶ì ${approvedGroups.length - 15}‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™`;
        }
        return api.sendMessage(msg, threadID, messageID);
      }

      case "pending": {
        const pendingGroups = config.APPROVAL.pendingGroups || [];
        if (pendingGroups.length === 0) {
          return api.sendMessage("üìù ‡¶ï‡ßã‡¶®‡ßã pending ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶®‡ßá‡¶á!", threadID, messageID);
        }
        let msg = `‚è≥ PENDING GROUPS (${pendingGroups.length}):\n\n`;
        pendingGroups.slice(0, 10).forEach((gid, i) => {
          msg += `${i + 1}. üÜî ${gid}\n`;
        });
        if (pendingGroups.length > 10) {
          msg += `... ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡¶ì ${pendingGroups.length - 10}‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™`;
        }
        return api.sendMessage(msg, threadID, messageID);
      }

      case "reject": {
        const targetID = args[1];
        if (!targetID) {
          return api.sendMessage("‚ùå Group ID ‡¶¶‡¶ø‡¶®!\nExample: /approve reject 12345", threadID, messageID);
        }
        // Remove from approved, add to rejected
        let changed = false;
        ["approvedGroups", "pendingGroups"].forEach(key => {
          const idx = config.APPROVAL[key].indexOf(targetID);
          if (idx !== -1) {
            config.APPROVAL[key].splice(idx, 1);
            changed = true;
          }
        });
        if (!config.APPROVAL.rejectedGroups.includes(targetID)) {
          config.APPROVAL.rejectedGroups.push(targetID);
          changed = true;
        }
        if (changed) {
          saveConfig(config);
          api.sendMessage(`‚ùå Group ${targetID} reject ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!`, threadID, messageID);
          // Try to notify group
          try {
            api.sendMessage(
              `‚ùå ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø admin ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ reject ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n\n` +
              `üö´ Bot ‡¶è‡¶∞ ‡¶ï‡ßã‡¶®‡ßã command ‡¶Ü‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ‡•§\n` +
              `üìû ‡¶Ü‡¶∞‡ßã ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø admin ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`,
              targetID
            );
          } catch (error) {
            // ignore
          }
        } else {
          api.sendMessage("‚ùå Group reject ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", threadID, messageID);
        }
        break;
      }

      default: {
        // Approve group (threadID or explicit argument)
        let targetID = threadID;
        if (args[0] && args[0] !== threadID && !isNaN(args[0])) {
          targetID = args[0];
        }

        // Convert to string for consistency
        targetID = String(targetID);

        // If already approved
        if (config.APPROVAL.approvedGroups.includes(targetID)) {
          return api.sendMessage(
            `‚úÖ ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá approved!\n\nüÜî TID: ${targetID}`,
            threadID, messageID
          );
        }
        // If rejected
        if (config.APPROVAL.rejectedGroups.includes(targetID)) {
          return api.sendMessage(
            `‚ùå ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á reject ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\nüÜî TID: ${targetID}`,
            threadID, messageID
          );
        }

        // Remove from pending if exists
        let pendingIdx = config.APPROVAL.pendingGroups.indexOf(targetID);
        if (pendingIdx !== -1) {
          config.APPROVAL.pendingGroups.splice(pendingIdx, 1);
        }
        
        // Remove from rejected if exists
        let rejectedIdx = config.APPROVAL.rejectedGroups.indexOf(targetID);
        if (rejectedIdx !== -1) {
          config.APPROVAL.rejectedGroups.splice(rejectedIdx, 1);
        }
        
        // Approve now
        if (!config.APPROVAL.approvedGroups.includes(targetID)) {
          config.APPROVAL.approvedGroups.push(targetID);
        }
        
        // Also add to AUTO_APPROVE
        if (!config.AUTO_APPROVE) {
          config.AUTO_APPROVE = { enabled: true, approvedGroups: [], autoApproveMessage: false };
        }
        if (!config.AUTO_APPROVE.approvedGroups.includes(targetID)) {
          config.AUTO_APPROVE.approvedGroups.push(targetID);
        }
        
        // Save config immediately
        saveConfig(config);
        
        // Also update global config cache
        if (global.config) {
          global.config.APPROVAL = config.APPROVAL;
          global.config.AUTO_APPROVE = config.AUTO_APPROVE;
        }

        // Send success message to owner
        api.sendMessage(
          `‚úÖ Group approved successfully!\n\nüÜî Thread ID: ${targetID}\n\nüöÄ Bot commands ‡¶è‡¶ñ‡¶®‡¶á active ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá!\nüí° Test ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã command try ‡¶ï‡¶∞‡ßÅ‡¶®`,
          threadID, messageID
        );

        // Notify the approved group if it's different from current thread
        if (targetID !== String(threadID)) {
          try {
            api.sendMessage(
              `üéâ ‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶®! ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡¶ü‡¶ø admin ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ approve ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n\n` +
              `‚úÖ ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ bot commands ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§\n` +
              `üìñ Command list ‡¶¶‡ßá‡¶ñ‡¶§‡ßá: ${global.config.PREFIX || '/'}help\n\n` +
              `üëë Bot Admin: ${global.config.ADMINBOT?.[0] || 'Unknown'}`,
              targetID
            );
          } catch (notifyError) {
            console.log(`Could not notify group ${targetID}: ${notifyError.message}`);
          }
        }
      }
    }
  } catch (error) {
    console.error("Approve command error:", error);
    return api.sendMessage("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
  }
};
